=============================================================================
List of generated methods in project: fc_135_kw

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_SetPortInputDisable -This function sets the pins input state for a port. Pins corresponding to bits with 
                value of '1' will not be configured as input and pins corresponding to bits with value of '0' will be 
                configured as input
   - pin_mux_PINS_DRV_GetPortInputDisable -This function returns the current pins input state for a port. Pins corresponding to 
                bits with value of '1' are not configured as input and pins corresponding to bits with value of '0' are 
                configured as input
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.
   - clockMan1_CLOCK_DRV_SetModuleClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source.
   - clockMan1_CLOCK_DRV_SetClockSource -This function configures a clock source.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "lpTmr1"    (component lptmr)
   - lpTmr1_LPTMR_DRV_InitConfigStruct -Initialize configuration structure.
   - lpTmr1_LPTMR_DRV_Init -Initializes the LPTMR as Timer or Pulse Counter
   - lpTmr1_LPTMR_DRV_SetConfig -Configure a LPTMR instance.
   - lpTmr1_LPTMR_DRV_GetConfig -Get the current configuration of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_Deinit -Deinitializes a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetCompareValueByCount -Change the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_GetCompareValueByCount -Get the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_SetCompareValueByUs -Set the compare value for Timer Mode in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareValueByUs -Get the Compare Value in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareFlag -Get the current state of the Compare Flag (Interrupt Pending)
   - lpTmr1_LPTMR_DRV_ClearCompareFlag -Clear the Compare/Interrupt Pending Flag.
   - lpTmr1_LPTMR_DRV_IsRunning -Get the run state of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetInterrupt -Enable/disable the LPTMR interrupt
   - lpTmr1_LPTMR_DRV_GetCounterValueByCount -Get the current counter value in counter tick units.
   - lpTmr1_LPTMR_DRV_StartCounter -Enable the LPTMR / Start the counter.
   - lpTmr1_LPTMR_DRV_StopCounter -Disable the LPTMR / Stop the counter.
   - lpTmr1_LPTMR_DRV_SetPinConfiguration -Set the Input Pin configuration for Pulse Counter mode.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "lpuart1"   (component lpuart)
   - lpuart1_LPUART_DRV_GetDefaultConfig -Initializes the LPUART configuration structure with default values.
   - lpuart1_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart1_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart1_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart1_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart1_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart1_LPUART_DRV_SendDataPolling -Send out multiple bytes of data using polling method.
   - lpuart1_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an a-sync 
                method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the transmit 
                status to know when the transmit is complete.
   - lpuart1_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart1_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart1_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking means that 
                the function does not return until the receive is complete.
   - lpuart1_LPUART_DRV_ReceiveDataPolling -Receive multiple bytes of data using polling method.
   - lpuart1_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an a-sync 
                method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the receive 
                status to know when the receive is complete.
   - lpuart1_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart1_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.
   - lpuart1_LPUART_DRV_SetBaudRate -Configures the LPUART baud rate.
   - lpuart1_LPUART_DRV_GetBaudRate -Returns the LPUART baud rate.
   - lpuart1_LPUART_DRV_SetTxBuffer -Sets the internal driver reference to the tx buffer.
   - lpuart1_LPUART_DRV_SetRxBuffer -Sets the internal driver reference to the rx buffer.

Module "canCom1"   (component flexcan)
   - canCom1_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom1_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom1_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom1_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom1_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom1_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom1_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom1_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom1_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom1_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom1_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom1_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance
   - canCom1_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.
   - canCom1_FLEXCAN_DRV_GetWMB -Extracts one of the frames which triggered the wake up event.
   - canCom1_FLEXCAN_DRV_SetBitrateCbt -Sets the FlexCAN bit rate for FD BRS.
   - canCom1_FLEXCAN_DRV_GetBitrateFD -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetTDCOffset -Enables/Disables the Transceiver Delay Compensation feature and sets the Transceiver 
                Delay Compensation Offset.
   - canCom1_FLEXCAN_DRV_GetTDCValue -Gets the value of the Transceiver Delay Compensation.
   - canCom1_FLEXCAN_DRV_GetTDCFail -Gets the value of the TDC Fail flag.
   - canCom1_FLEXCAN_DRV_ClearTDCFail -Clears the TDC Fail flag.

Module "canCom2"   (component flexcan)
   - canCom2_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom2_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom2_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom2_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom2_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom2_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom2_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom2_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom2_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom2_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom2_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom2_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom2_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom2_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom2_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom2_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom2_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom2_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom2_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom2_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom2_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom2_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom2_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom2_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom2_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom2_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance
   - canCom2_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.
   - canCom2_FLEXCAN_DRV_GetWMB -Extracts one of the frames which triggered the wake up event.

Module "canCom3"   (component flexcan)
   - canCom3_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom3_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom3_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom3_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom3_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom3_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom3_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom3_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom3_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom3_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom3_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom3_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom3_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom3_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom3_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom3_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom3_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom3_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom3_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom3_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom3_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom3_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom3_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom3_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom3_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom3_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance
   - canCom3_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.
   - canCom3_FLEXCAN_DRV_GetWMB -Extracts one of the frames which triggered the wake up event.

Module "flexTimer_pwm0" (component ftm_pwm)
   - flexTimer_pwm0_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_pwm0_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_pwm0_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - flexTimer_pwm0_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - flexTimer_pwm0_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - flexTimer_pwm0_FTM_DRV_FastUpdatePwmChannels -This function will update the duty cycle of PWM output for multiple channels.
   - flexTimer_pwm0_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - flexTimer_pwm0_FTM_DRV_UpdatePwmPeriodDither -This function will use in the PWM period dithering.
   - flexTimer_pwm0_FTM_DRV_UpdatePwmEdgeChannelDither -This function will use in the PWM edge dithering.
   - flexTimer_pwm0_FTM_PWM_DRV_IrqHandler -This function is used to workaround an errata E10856 for FTM.
   - flexTimer_pwm0_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_pwm0_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get 
                this value after an overflow event.
   - flexTimer_pwm0_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_pwm0_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_pwm0_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_pwm0_FTM_DRV_SetAllChnSoftwareOutputControl -This function will control list of channels by software to force 
                the output to specified value.
   - flexTimer_pwm0_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_pwm0_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_pwm0_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_pwm0_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_pwm0_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "flexTimer_pwm1" (component ftm_pwm)
   - flexTimer_pwm1_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_pwm1_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_pwm1_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - flexTimer_pwm1_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - flexTimer_pwm1_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - flexTimer_pwm1_FTM_DRV_FastUpdatePwmChannels -This function will update the duty cycle of PWM output for multiple channels.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmPeriodDither -This function will use in the PWM period dithering.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmEdgeChannelDither -This function will use in the PWM edge dithering.
   - flexTimer_pwm1_FTM_PWM_DRV_IrqHandler -This function is used to workaround an errata E10856 for FTM.
   - flexTimer_pwm1_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_pwm1_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get 
                this value after an overflow event.
   - flexTimer_pwm1_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_pwm1_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_pwm1_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_pwm1_FTM_DRV_SetAllChnSoftwareOutputControl -This function will control list of channels by software to force 
                the output to specified value.
   - flexTimer_pwm1_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_pwm1_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_pwm1_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_pwm1_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_pwm1_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "flexTimer_pwm2" (component ftm_pwm)
   - flexTimer_pwm2_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_pwm2_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_pwm2_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - flexTimer_pwm2_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - flexTimer_pwm2_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - flexTimer_pwm2_FTM_DRV_FastUpdatePwmChannels -This function will update the duty cycle of PWM output for multiple channels.
   - flexTimer_pwm2_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - flexTimer_pwm2_FTM_DRV_UpdatePwmPeriodDither -This function will use in the PWM period dithering.
   - flexTimer_pwm2_FTM_DRV_UpdatePwmEdgeChannelDither -This function will use in the PWM edge dithering.
   - flexTimer_pwm2_FTM_PWM_DRV_IrqHandler -This function is used to workaround an errata E10856 for FTM.
   - flexTimer_pwm2_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_pwm2_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get 
                this value after an overflow event.
   - flexTimer_pwm2_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_pwm2_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_pwm2_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_pwm2_FTM_DRV_SetAllChnSoftwareOutputControl -This function will control list of channels by software to force 
                the output to specified value.
   - flexTimer_pwm2_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_pwm2_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_pwm2_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_pwm2_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_pwm2_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "flexTimer_pwm3" (component ftm_pwm)
   - flexTimer_pwm3_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_pwm3_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_pwm3_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - flexTimer_pwm3_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - flexTimer_pwm3_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - flexTimer_pwm3_FTM_DRV_FastUpdatePwmChannels -This function will update the duty cycle of PWM output for multiple channels.
   - flexTimer_pwm3_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - flexTimer_pwm3_FTM_DRV_UpdatePwmPeriodDither -This function will use in the PWM period dithering.
   - flexTimer_pwm3_FTM_DRV_UpdatePwmEdgeChannelDither -This function will use in the PWM edge dithering.
   - flexTimer_pwm3_FTM_PWM_DRV_IrqHandler -This function is used to workaround an errata E10856 for FTM.
   - flexTimer_pwm3_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_pwm3_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get 
                this value after an overflow event.
   - flexTimer_pwm3_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_pwm3_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_pwm3_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_pwm3_FTM_DRV_SetAllChnSoftwareOutputControl -This function will control list of channels by software to force 
                the output to specified value.
   - flexTimer_pwm3_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_pwm3_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_pwm3_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_pwm3_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_pwm3_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "pdb1"      (component pdb)
   - pdb1_PDB_DRV_Init -Initializes the PDB counter and triggers input
   - pdb1_PDB_DRV_Deinit -De-initializes the PDB module
   - pdb1_PDB_DRV_GetDefaultConfig -Gets the default configuration structure of PDB with default settings
   - pdb1_PDB_DRV_Enable -Enables the PDB module
   - pdb1_PDB_DRV_Disable -Disables the PDB module
   - pdb1_PDB_DRV_SoftTriggerCmd -Triggers the PDB with a software trigger
   - pdb1_PDB_DRV_GetTimerValue -Gets the current counter value in the PDB module
   - pdb1_PDB_DRV_GetTimerIntFlag -Gets the PDB interrupt flag
   - pdb1_PDB_DRV_ClearTimerIntFlag -Clears the interrupt flag
   - pdb1_PDB_DRV_LoadValuesCmd -Executes the command of loading values
   - pdb1_PDB_DRV_SetTimerModulusValue -Sets the value of timer modulus
   - pdb1_PDB_DRV_SetValueForTimerInterrupt -Sets the value for the timer interrupt
   - pdb1_PDB_DRV_ConfigAdcPreTrigger -Configures the ADC pre_trigger in the PDB module
   - pdb1_PDB_DRV_GetAdcPreTriggerFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdb1_PDB_DRV_ClearAdcPreTriggerFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdb1_PDB_DRV_GetAdcPreTriggerSeqErrFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdb1_PDB_DRV_ClearAdcPreTriggerSeqErrFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdb1_PDB_DRV_SetAdcPreTriggerDelayValue -Sets the ADC pre_trigger delay value in the PDB module
   - pdb1_PDB_DRV_SetCmpPulseOutEnable -Switches on/off the CMP pulse out in the PDB module
   - pdb1_PDB_DRV_SetCmpPulseOutDelayForHigh -Sets the CMP pulse out delay value for high in the PDB module
   - pdb1_PDB_DRV_SetCmpPulseOutDelayForLow -Sets the CMP pulse out delay value for low in the PDB module

Module "pdb2"      (component pdb)
   - pdb2_PDB_DRV_Init -Initializes the PDB counter and triggers input
   - pdb2_PDB_DRV_Deinit -De-initializes the PDB module
   - pdb2_PDB_DRV_GetDefaultConfig -Gets the default configuration structure of PDB with default settings
   - pdb2_PDB_DRV_Enable -Enables the PDB module
   - pdb2_PDB_DRV_Disable -Disables the PDB module
   - pdb2_PDB_DRV_SoftTriggerCmd -Triggers the PDB with a software trigger
   - pdb2_PDB_DRV_GetTimerValue -Gets the current counter value in the PDB module
   - pdb2_PDB_DRV_GetTimerIntFlag -Gets the PDB interrupt flag
   - pdb2_PDB_DRV_ClearTimerIntFlag -Clears the interrupt flag
   - pdb2_PDB_DRV_LoadValuesCmd -Executes the command of loading values
   - pdb2_PDB_DRV_SetTimerModulusValue -Sets the value of timer modulus
   - pdb2_PDB_DRV_SetValueForTimerInterrupt -Sets the value for the timer interrupt
   - pdb2_PDB_DRV_ConfigAdcPreTrigger -Configures the ADC pre_trigger in the PDB module
   - pdb2_PDB_DRV_GetAdcPreTriggerFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdb2_PDB_DRV_ClearAdcPreTriggerFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdb2_PDB_DRV_GetAdcPreTriggerSeqErrFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdb2_PDB_DRV_ClearAdcPreTriggerSeqErrFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdb2_PDB_DRV_SetAdcPreTriggerDelayValue -Sets the ADC pre_trigger delay value in the PDB module
   - pdb2_PDB_DRV_SetCmpPulseOutEnable -Switches on/off the CMP pulse out in the PDB module
   - pdb2_PDB_DRV_SetCmpPulseOutDelayForHigh -Sets the CMP pulse out delay value for high in the PDB module
   - pdb2_PDB_DRV_SetCmpPulseOutDelayForLow -Sets the CMP pulse out delay value for low in the PDB module

Module "adConv1"   (component adc)
   - adConv1_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv1_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv1_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv1_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv1_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv1_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv1_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv1_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv1_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv1_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv1_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv1_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv1_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv1_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv1_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv1_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv1_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv1_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv1_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv1_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv1_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv1_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv1_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "adConv2"   (component adc)
   - adConv2_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv2_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv2_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv2_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv2_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv2_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv2_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv2_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv2_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv2_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv2_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv2_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv2_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv2_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv2_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv2_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv2_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv2_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv2_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv2_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv2_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv2_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv2_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv2_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv2_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "Cpu"       (component S32K144_100)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
